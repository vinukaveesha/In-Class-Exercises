#include<iostream>
#include <vector>
#include <stack>
#include <chrono>
using namespace std;

void quickSort(vector<int>& arr) {

    stack<pair<int, int>> stack_;
    stack_.push(make_pair(0, arr.size() - 1));

    while (!stack_.empty()) {
        int start = stack_.top().first, end = stack_.top().second;
        stack_.pop();

        if (start >= end) {
            continue;
        }

        int pivot = arr[end];
        int left = start, right = end - 1;

        while (left <= right) {
            while (left <= right && arr[left] < pivot) {
                left++;
            }
            while (left <= right && arr[right] > pivot) {
                right--;
            }
            if (left <= right) {
                swap(arr[left], arr[right]);
                left++, right--;
            }
        }
        int temp = arr[end];
        arr[end]=arr[left];
        arr[left]=temp;

        stack_.push(make_pair(start, left - 1));
        stack_.push(make_pair(left + 1, end));
    }
}

int main(){
    int sz=48000;
    vector<int> randArray(sz);
    for(int i=0;i<sz;i++){
        randArray[i]=rand()%sz;
    }

    auto start_time = chrono::high_resolution_clock::now();
    quickSort(randArray);
    auto end_time = chrono::high_resolution_clock::now();
    auto elapsed_time = chrono::duration_cast<chrono::microseconds>(end_time-start_time);

    cout<<"Non-recursive Algorithm - Elapsed time for the array length of "<< sz <<" :"<<elapsed_time.count()<<" ms"<<endl;

    return 0;
}
